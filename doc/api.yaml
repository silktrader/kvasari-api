openapi: 3.0.0
info:
  title: Kvasari
  version: 1.0.0
  description: |
    Kvasari meets the needs of narcissistic users, craving to showcase their visual artworks,
    while receiving feedback in the form of immediate reactions or more articulate textual comments.
  contact:
    name: Carlo Giuseppe Tomazzoli
    email: tomazzoli.1951193@studenti.uniroma1.it
    url: https://github.com/silktrader
  license:
    name: GPLv3
    url: https://spdx.org/licenses/GPL-3.0-or-later.html
servers:
  - url: http://localhost:3000
    description: Development
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  responses:
    TimestampedMessage:
      description: Successful or unsuccessful request, with description message and timestamp.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TimestampedMessage"
          example:
            Message: A message describing what went wrong with the operation and how to avoid further issues.
            Timestamp: "2022-12-02T17:03:51Z"

    TimestampedError:
      description: Hopefully handled internal server error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TimestampedError"
          example:
            Error: Something horrible occurred
            Timestamp: "2022-12-02T17:34:33Z"

  parameters:
    UserAlias:
      name: alias
      description: User alias that uniquely identifies them.
      in: path
      required: true
      schema:
        type: string
        example: gklimt
        minLength: 5
        maxLength: 16
        pattern: ^[a-z0-9_-]{5,16}$

    Target:
      name: target
      description: User alias that uniquely identifies them.
      in: path
      required: true
      schema:
        type: string
        minLength: 5
        maxLength: 16
        pattern: ^[a-z0-9_-]{5,16}$

    ArtworkID:
      name: artworkId
      description: Randomly generated unique identifier of an artwork.
      in: path
      required: true
      schema:
        type: string
        format: uuid
        minLength: 36
        maxLength: 36
        pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
        example: 497f6eca-6276-4993-bfeb-53cbbbba6f08

  schemas:
    TimestampedMessage:
      title: Timestamped Message
      type: object
      description: A server message and its date of inception.
      properties:
        Message:
          type: string
          description: "An ideally helpful message describing bad requests, not found resources, etc."
        Timestamp:
          $ref: "#/components/schemas/Timestamp"
      required:
        - Message
        - Timestamp

    TimestampedError:
      title: Timestamped Error
      type: object
      description: A server error and its date of inception.
      properties:
        Error:
          type: string
          description: "Error message stripped of debug information, for security purposes"
        Timestamp:
          $ref: "#/components/schemas/Timestamp"
      required:
        - Error
        - Timestamp

    UserRegistrationResponse:
      title: User Registration
      type: object
      description: User data following their registration
      properties:
        Id:
          $ref: "#/components/schemas/UUID"
        Alias:
          $ref: "#/components/schemas/UserAlias"
        Name:
          $ref: "#/components/schemas/UserName"
        Email:
          $ref: "#/components/schemas/Email"
        Created:
          $ref: "#/components/schemas/Timestamp"
        Updated:
          $ref: "#/components/schemas/Timestamp"

    UserBans:
      title: User Bans
      type: array
      description: List of users banned by the requester
      minItems: 0
      maxItems: 1000
      uniqueItems: true
      items:
        type: object
        properties:
          Id:
            $ref: "#/components/schemas/UUID"
          Alias:
            $ref: "#/components/schemas/UserAlias"
          Name:
            $ref: "#/components/schemas/UserName"
          Banned:
            $ref: "#/components/schemas/Timestamp"
        required:
          - Id
          - Alias
          - Name
          - Banned

    BannedUserResponse:
      title: Banned User Response
      type: object
      description: Data related to the banning of a user
      properties:
        Alias:
          $ref: "#/components/schemas/UserAlias"
        Banned:
          $ref: "#/components/schemas/Timestamp"

    FollowersResponse:
      title: User Followers
      description: An array comprising the data of users who follow a given source.
      type: array
      minItems: 0
      maxItems: 1000
      items:
        type: object
        properties:
          Id:
            $ref: "#/components/schemas/UUID"
          Alias:
            $ref: "#/components/schemas/UserAlias"
          Name:
            $ref: "#/components/schemas/UserName"
          Email:
            $ref: "#/components/schemas/Email"
          Followed:
            $ref: "#/components/schemas/Timestamp"

    FollowedUserResponse:
      title: Followed User Response
      type: object
      description: Date and confirmation of following a user
      additionalProperties: false
      properties:
        Alias:
          $ref: "#/components/schemas/UserAlias"
        Followed:
          $ref: "#/components/schemas/Timestamp"

    CreatedCommentResponse:
      title: Created Comment Response
      type: object
      description: "ID and timestamp of the posted comment, for display and future deletion or editing"
      additionalProperties: false
      properties:
        Id:
          $ref: "#/components/schemas/UUID"
        Date:
          $ref: "#/components/schemas/Timestamp"

    ReactedResponse:
      title: User Reaction Response
      type: object
      description: "Confirmation of the recorded reaction type and date"
      additionalProperties: false
      properties:
        Reaction:
          $ref: "#/components/schemas/Reaction"
        Date:
          $ref: "#/components/schemas/Timestamp"

    UserAlias:
      title: User Alias
      description: A unique user alias
      type: string
      example: gklimt
      minLength: 5
      maxLength: 16
      pattern: "^[a-z0-9_-]{5,16}$"

    UserName:
      title: User Name
      description: A user's full name
      type: string
      example: Gustav Klimt
      minLength: 5
      maxLength: 50
      pattern: ^[\w'\-,.]*[^_!¡?÷?¿\/\\+=@#$%ˆ&*(){}|~<>;:[\]]*$

    UserPassword:
      title: User Password
      description: A user chosen password
      type: string
      format: password
      example: notastrong_password_AT_4ll
      minLength: 8
      maxLength: 50
      pattern: '[\s\S]*'

    Email:
      title: Email
      description: A user provided email address, guaranteed to be unique.
      type: string
      format: email
      example: silktrader@gmail.com
      minLength: 5
      maxLength: 100
      pattern: '[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+'

    UUID:
      title: UUID
      description: "Randomly generated (almost) universally unique identifier, i.e. UUIDv4"
      type: string
      format: uuid
      minLength: 36
      maxLength: 36
      example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
      pattern: ^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$

    Timestamp:
      title: Timestamp
      description: RFC3339 encoded UTC time
      type: string
      format: date-time
      minLength: 20
      maxLength: 20
      example: "2019-08-24T14:15:22Z"

    Reaction:
      title: Reaction
      description: A user reaction to an artwork.
      type: string
      enum:
        - Like
        - Perplexed

    ImageFormat:
      title: Image Format
      description: The file format and extension of an image, required to located it on a file system.
      type: string
      enum:
        - jpg
        - png
        - webp

    ArtworkTitle:
      title: Artwork's Title
      description: An optional title describing the artwork.
      type: string
      minLength: 1
      maxLength: 250
      pattern: '[\s\S]*'

    ArtworkAuthor:
      title: Artwork's Author
      description: Basic details about an artist.
      type: object
      additionalProperties: false
      properties:
        Alias:
          $ref: "#/components/schemas/UserAlias"
        Name:
          $ref: "#/components/schemas/UserName"
      required:
        - Alias
        - Name

    ReactionsCount:
      title: Reactions Count
      description: The number of reactions elicited by an artwork.
      type: integer
      minimum: 0

    CommentsCount:
      title: Comments Count
      description: The number of comments elicited by an artwork.
      type: integer
      minimum: 0

    AuthenticationResponse:
      title: Authentication Response
      type: object
      description: The authentication attempt's result, including the requesting user ID and a status message.
      properties:
        Id:
          $ref: "#/components/schemas/UUID"
        Name:
          $ref: "#/components/schemas/UserName"
        Alias:
          $ref: "#/components/schemas/UserAlias"
        Status:
          description: A status describing the operation, temporarily limited to "authenticated".
          type: string
      example:
        Id: c09cb1fd-495f-4f63-84dc-87c15a2f7740
        Name: Egon Schiele
        Alias: eschiele
        Status: authenticated

security:
  - bearerAuth: [ ]

tags:
  - name: Artworks
    description: "Endpoints allowing artworks to be added, removed, edited or simply viewed."
  - name: Feedback
    description: Endpoints permitting and facilitating users interactions, such as leaving reactions or comments.
  - name: User Management
    description: Endpoints related to users administration.
  - name: User Relationships
    description: "Endpoints regulating users bans and followers, their addition and removal."

paths:
  /sessions:
    post:
      summary: Login
      description: >
        Performs a simplistic authentication attempt, returning basic user data and their status on success.
        Passwords aren't checked; only mere user existence is verified.
      tags:
        - User Management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: The user's authorisation credentials.
              properties:
                Alias:
                  $ref: "#/components/schemas/UserAlias"
                Password:
                  $ref: "#/components/schemas/UserPassword"
              required:
                - Alias
                - Password
            example:
              Alias: eschiele
              Password: notusedbutstored
      responses:
        "201":
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
        "400":
          $ref: "#/components/responses/TimestampedMessage"
      operationId: doLogin

  /users:
    post:
      summary: Register User
      description: >
        Register a new user given their unique alias and email. Set the initial full name and a token, unused, password.
      tags:
        - User Management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: User basic details, provided during registration, aimed at identifying them.
              properties:
                Name:
                  $ref: "#/components/schemas/UserName"
                Alias:
                  $ref: "#/components/schemas/UserAlias"
                Email:
                  $ref: "#/components/schemas/Email"
                Password:
                  $ref: "#/components/schemas/UserPassword"
            example:
              Name: John Everett Millais
              Alias: millais
              Email: jem@gmail.com
              Password: pa$$word
      responses:
        "201":
          description: User Registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistrationResponse"
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "500":
          $ref: "#/components/responses/TimestampedError"
      operationId: registerUser

  /users/{alias}/name:
    put:
      tags:
        - User Management
      summary: Edit User Name
      description: Change the specified user's full name to a new value.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: The new user name.
              properties:
                Name:
                  $ref: "#/components/schemas/UserName"
              required:
                - Name
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: "#/components/responses/TimestampedError"
      operationId: setMyUserName
    parameters:
      - $ref: "#/components/parameters/UserAlias"

  /users/{alias}/alias:
    put:
      summary: Edit User Alias
      description: Change the specified user's alias to a new unique value.
      requestBody:
        content:
          application/json:
            schema:
              description: The new unique user alias.
              type: object
              properties:
                Alias:
                  $ref: "#/components/schemas/UserAlias"
              required:
                - Alias
        description: "A new user alias"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: "#/components/responses/TimestampedError"
      operationId: editAlias
      tags:
        - User Management
    parameters:
      - $ref: "#/components/parameters/UserAlias"

  /users/{alias}/bans:
    get:
      summary: Get Bans
      description: "Fetch the users banned by the selected alias, provided authorised credentials."
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserBans"
              examples:
                common:
                  value:
                    - Id: 38dc5047-db66-46b4-81a7-f77bd84d0516
                      Alias: waterhouse
                      Name: John William Waterhouse
                      Banned: "2022-12-02T19:13:57Z"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: "#/components/responses/TimestampedError"
      operationId: getBans
      tags:
        - User Relationships
    post:
      summary: Ban User
      description: "Allows the authorised user to ban a target, by specifying their unique alias."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: The alias of the user to be banned.
              properties:
                TargetAlias:
                  $ref: "#/components/schemas/UserAlias"
            example:
              TargetAlias: waterhouse
      responses:
        "201":
          description: User Banned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BannedUserResponse"
              example:
                Alias: gklimt
                Banned: "2022-11-27T19:55:34Z"
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: "#/components/responses/TimestampedError"
      operationId: banUser
      tags:
        - User Relationships
    parameters:
      - $ref: "#/components/parameters/UserAlias"

  /users/{alias}/bans/{target}:
    delete:
      summary: Unban User
      description: Removes the user's ban on the target, restoring their ability to view artworks and follow the source.
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
        "403":
          $ref: "#/components/responses/TimestampedMessage"
        "500":
          $ref: "#/components/responses/TimestampedError"
      operationId: unbanUser
      tags:
        - User Relationships
    parameters:
      - $ref: "#/components/parameters/UserAlias"
      - $ref: "#/components/parameters/Target"

  /users/{alias}/followers:
    get:
      summary: Get Followers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowersResponse"
              examples:
                common:
                  value:
                    - ID: 637c8e48-6e0b-4b6c-acc4-a0ff293dcac2
                      Alias: gklimt
                      Name: Gustav Klimt
                      Email: klimt@gmail.com
                      Followed: "2022-11-27T19:55:34Z"
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/TimestampedError"
      operationId: getFollowers
      description: |-
        Fetches all the users who follow the specified alias.
        No authorisation is required, temporarily, for development's purposes.
      deprecated: true
      tags:
        - User Relationships
    parameters:
      - $ref: "#/components/parameters/UserAlias"

  /users/{alias}/followed:
    post:
      summary: Follow User
      requestBody:
        content:
          application/json:
            schema:
              description: The alias of the user to be followed.
              type: object
              properties:
                targetAlias:
                  $ref: "#/components/schemas/UserAlias"
              required:
                - targetAlias
        description: The unique alias matching the target user to follow.
      responses:
        "201":
          description: User Followed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowedUserResponse"
              example:
                Alias: gklimt
                Followed: "2022-11-27T19:55:34Z"
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/TimestampedError"
      operationId: followUser
      description: "Allows a user to follow another one, thereby receiving news of their posted artwork."
      tags:
        - User Relationships
    parameters:
      - $ref: "#/components/parameters/UserAlias"

  /users/{alias}/followed/{target}:
    delete:
      summary: Unfollow User
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/TimestampedError"
      operationId: unfollowUser
      description: Removes the target user from the ones followed by the requesting user.
      tags:
        - User Relationships
    parameters:
      - $ref: "#/components/parameters/UserAlias"
      - $ref: "#/components/parameters/Target"

  /artworks/{artworkId}/comments:
    post:
      summary: Add Artwork Comment
      requestBody:
        content:
          application/json:
            schema:
              description: Artwork feedback in the form of a long plain text comment.
              type: object
              properties:
                Comment:
                  type: string
                  description: "A possibly constructive comment, limited to 3000 characters, but no shorter than 10"
                  minLength: 10
                  maxLength: 3000
                  pattern: '[\s\S]*'
              required:
                - Comment
            example:
              Comment: One of his most memorable works.
        description: "A textual commment, unformatted, limited to 3000 characters"
      responses:
        "201":
          description: Comment created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedCommentResponse"
              example:
                Id: 4b6cc7c6-cad5-4585-9aca-8cf425319345
                Date: "2022-12-04T09:53:56Z"
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/TimestampedError"
      tags:
        - Feedback
      operationId: commentPhoto
      description: Allows users to leave a comment on theirs or another user's artwork.
    parameters:
      - $ref: "#/components/parameters/ArtworkID"

  /artworks/{artworkId}/comments/{commentId}:
    delete:
      summary: Delete Artwork Comment
      responses:
        "204":
          description: Artwork Deleted
        "401":
          description: Unauthorized
        "404":
          $ref: "#/components/responses/TimestampedMessage"
        "500":
          $ref: "#/components/responses/TimestampedError"
      tags:
        - Feedback
      operationId: uncommentPhoto
      description: Removes a previously recorded comment.
    parameters:
      - $ref: "#/components/parameters/ArtworkID"
      - schema:
          $ref: "#/components/schemas/UUID"
        name: commentId
        in: path
        required: true
        description: The randomly generated unique identifier of a user comment
        example: "0e0dcd46-ef66-4b88-8b53-969385df4bce"

  /artworks/{artworkId}/reactions/{alias}:
    put:
      summary: Set Artwork Reaction
      requestBody:
        content:
          application/json:
            schema:
              description: A reaction, chosen among available adjectives and nouns.
              type: object
              example:
                Reaction: Like
              additionalProperties: false
              properties:
                Reaction:
                  $ref: "#/components/schemas/Reaction"
        description: The user's reaction elicited by the artwork.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReactedResponse"
              example:
                Reaction: "Like"
                Date: "2022-12-04T09:53:56Z"
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: "#/components/responses/TimestampedError"
      tags:
        - Artworks
        - Feedback
      operationId: likePhoto
      description: >
        Allows users to react to another user's artwork, by selecting a reaction
        from a limited range of mutually exclusive options, such as "like", or "perplexed".
    parameters:
      - $ref: "#/components/parameters/ArtworkID"
      - $ref: "#/components/parameters/UserAlias"
    delete:
      summary: "Remove a reaction"
      operationId: unlikePhoto
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/TimestampedError"
      description: Remove a previously expressed reaction.
      tags:
        - Artworks
        - Feedback

  /artworks:
    post:
      summary: Add Artwork
      tags:
        - Artworks
      operationId: uploadPhoto
      description: >
        Allows authenticated users to post images of their artworks.
        They are expected to edit accessory metadata at a second stage, possibly in bulk.
      parameters: [ ]
      requestBody:
        description: >
          An artwork image, in the JPG, PNG or WebP file format, deprived of metadata.
        content:
          multipart/form-data:
            schema:
              description: An object containing an image as a binary string.
              type: object
              properties:
                image:
                  description: A binary string representing an image in either JPG, PNG, or WebP format.
                  type: string
                  minLength: 0
                  maxLength: 9000000
                  format: binary
            encoding:
              image:
                contentType: image/png, image/jpeg, image/webp
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                description: >
                  The server generated artwork ID, along with its date of insertion,
                  and the detected image format, which may deviate from the extension.
                type: object
                properties:
                  Id:
                    $ref: "#/components/schemas/UUID"
                  Updated:
                    $ref: "#/components/schemas/Timestamp"
                  Format:
                    $ref: "#/components/schemas/ImageFormat"
              example:
                Id: f295c60a-60bf-495e-be9f-32882dac63ca
                Updated: "2022-12-02T22:49:54Z"
                Format: jpg
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: "#/components/responses/TimestampedError"

  /artworks/{artworkId}:
    delete:
      tags:
        - Artworks
      summary: Delete Artwork
      responses:
        "204":
          description: Resource Deleted
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
      operationId: deletePhoto
      description: >
        Removes a previously posted artwork, ensuring the acting user has appropriate rights.
    parameters:
      - $ref: "#/components/parameters/ArtworkID"

  /users/{alias}:
    get:
      tags:
        - User Management
      summary: Get User Profile
      responses:
        "200":
          description: Fetch User Data
          content:
            application/json:
              schema:
                type: object
                description: >
                  Data pertaining to the user's profile page, including previews of user's artworks,
                  as well as their followers and followed peers.
                properties:
                  Name:
                    $ref: "#/components/schemas/UserName"
                  Email:
                    $ref: "#/components/schemas/Email"
                  Followers:
                    type: integer
                    minimum: 0
                    description: The number of people who follow the artist.
                  Following:
                    type: integer
                    minimum: 0
                    description: The number of people the artist follows.
                  ArtworksAdded:
                    type: integer
                    minimum: 0
                    description: The number of artworks added by the artist.
                  Comments:
                    $ref: "#/components/schemas/CommentsCount"
                  Reactions:
                    $ref: "#/components/schemas/ReactionsCount"
                  FollowedByUser:
                    type: boolean
                    description: Reports whether the requesting user follows the artist.
                  FollowsUser:
                    type: boolean
                    description: Reports whether the artist follows the requesting user.
                  BlockedByUser:
                    type: boolean
                    description: Reports whether the artist is blocked by the requesting user.
                  Created:
                    $ref: "#/components/schemas/Timestamp"
                  Updated:
                    $ref: "#/components/schemas/Timestamp"
                required:
                  - Name
                  - Email
                  - Followers
                  - Following
                  - ArtworksAdded
                  - Comments
                  - Reactions
                  - FollowedByUser
                  - FollowsUser
                  - BlockedByUser
                  - Created
                  - Updated
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/TimestampedError"
      operationId: getUserProfile
      description: >
        Provides a snapshot of an artist's activities, including:
          * their publicly available biographic data
          * a count of followers and followed artists
          * a count of received comments and reactions
    parameters:
      - $ref: "#/components/parameters/UserAlias"

  /users/{alias}/stream:
    get:
      tags:
        - Artworks
      summary: Get a user's stream
      parameters:
        - $ref: "#/components/parameters/UserAlias"
        - name: since
          in: query
          schema:
            type: string
            format: date-time
            minLength: 20
            maxLength: 20
            example: "2022-12-02T02:46:05Z"
            pattern: '^[1-9]\d{3}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$'
          example: "2022-12-02T02:46:05Z"
          required: true
          description: The date and time of the last successful stream request.
        - name: latest
          in: query
          schema:
            type: string
            format: date-time
            minLength: 20
            maxLength: 20
            example: "2022-12-02T02:46:05Z"
            pattern: '^[1-9]\d{3}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$'
          example: "2022-12-02T15:04:05Z"
          required: true
          description: The date and time of the latest update received.
      operationId: getMyStream
      description: >
        Returns the artworks uploaded by followed artists, in reverse chronological order, by the dozen,
        starting from the first artwork added after the "latest" timestamp.

        The "since" timestamp signals the point in time whence all data is assumed to be up to date.

        The purpose is to build a paginated, but continuous stream of artworks, through multiple requests,
        fetching added artworks, as well as gathering the IDs of removed ones and the latest additions
        since the last request.
      responses:
        "200":
          description: Collections of artworks and deleted artworks' IDs.
          content:
            application/json:
              schema:
                type: object
                description: >
                  Artworks metadata used to populate a user's personal stream.

                  The `Artworks` collection comprises the latest twelve items, in reverse chronological order,
                  added by followed peers, starting from the date specified in the `since` query parameter.

                  `NewArtworks` contains those items that were added since the `latest` query parameter.

                  `RemovedIds` marks artworks that have been deleted by users, during the requests,
                  and that may need to be scrapped from the stream.
                properties:
                  Artworks:
                    description: Twelve artworks or fewer, sorted by their date of upload, in descending order.
                    type: array
                    minItems: 0
                    maxItems: 12
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        Id:
                          $ref: "#/components/schemas/UUID"
                        Title:
                          $ref: "#/components/schemas/ArtworkTitle"
                        Author:
                          $ref: "#/components/schemas/ArtworkAuthor"
                        Reactions:
                          $ref: "#/components/schemas/ReactionsCount"
                        Comments:
                          $ref: "#/components/schemas/CommentsCount"
                        Added:
                          $ref: "#/components/schemas/Timestamp"
                  NewArtworks:
                    description: Artworks added after the `since` timestamp provided in the request query.
                    type: array
                    minItems: 0
                    maxItems: 12
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        Id:
                          $ref: "#/components/schemas/UUID"
                        Title:
                          $ref: "#/components/schemas/ArtworkTitle"
                        Author:
                          $ref: "#/components/schemas/ArtworkAuthor"
                        Reactions:
                          type: integer
                          description: The number of reactions elicited by the artwork.
                          minimum: 0
                          maximum: 100000
                        Comments:
                          type: integer
                          description: The number of comments elicited by the artwork.
                          minimum: 0
                          maximum: 100000
                        Added:
                          $ref: "#/components/schemas/Timestamp"
                  DeletedIds:
                    description: Artworks removed during the time between the "since" and "latest" timestamps.
                    type: array
                    minItems: 0
                    maxItems: 100
                    items:
                      $ref: "#/components/schemas/UUID"
                required:
                  - Artworks
                  - NewArtworks
                  - DeletedIds
        "400":
          $ref: "#/components/responses/TimestampedMessage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: "#/components/responses/TimestampedError"
